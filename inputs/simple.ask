package main;

use fmt;
use test;

interface Writer<T, Foo<E>> {    
    Simple();
    Advance(src: string, dst: string) -> error;
    WithGenerics<T, Foo<E>>(i: int, is_fancy: bool) -> error;
    WithReturnTuple() -> (int, error);
}

struct Banana<Bar<T, U>, Z, Boo<U, X>> {
    Name string;
    Noop int;
    Apple char;
    Orange float;
    Fab Bar<T,U>;
    Baf Z;
    Goooooo Boo<U,X>;
}

fn main() -> int {
    let t = fmt.random.lekker.Println("hello");
    return 0;
}

fn WithGenerics<T, Foo<E>>(i: int, is_fancy: bool) -> (int, error) {
    return (0, nil);
}

fn copyFile(src: string, dst: string) -> error {
    let stat = os.Stat(src);

    if (!stat.Mode().IsRegular()) {
        return Err(fmt.Errorf("%s is not a regular file", src));
    }

    let source = os.Open(src);
    defer source.Close();

    let destination_magic = os.Create(dst);
    defer destination_magic.Close();

    let text = "hello world";
    //let guess = match strconv.Atoi(text) {
    //    Ok(n) => n,
    //    Err(_) => continue,
    //}

    // ignore number of bytes copied
    let cp = io.Copy(destination_magic, source);

    return nil;
}