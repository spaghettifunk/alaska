// this works
package main;

// this works
use fmt;
use test;

// this works
interface Writer<T, Foo<E>> {    
    simple();
    advance(src: string, dst: string) -> error;
    with_generics<T, Foo<E>>(i: int, is_fancy: bool) -> error;
    with_return_tuple() -> (int, error);
}

// this works
struct Banana<Bar<T, U>, Z, Boo<U, X>> {
    Name string;
    Noop int;
    Apple char;
    Orange float;
    Fab Bar<T,U>;
    Baf Z;
    Goooooo Boo<U,X>;
}

// TODO: in the evaluation pass, if a member is `pub` but the struct is not, return an error
pub struct Test {
    Name string; // fields always private
    pub Age int; // this is a publicly accessible field
}

impl Banana<Bar<T, U>, Z, Boo<U, X>> with (Writer<T, Foo<E>>, Test) {
    pub fn new(name: string, noop: int) -> Banana<Bar<T, U>, Z, Boo<U, X>> {
        return Banana{Name: name, Noop: noop};
    }

    fn private_method() -> int {
        let k = 20 - 45;
        let w = k * 8 / 3;
        fmt.Println("result %d", w);
        return -10;
    }

    pub fn public_method(src: string) -> (int, Z, error) {
        let x = "hello public method";
        return (10, x, nil);
    }
}

/* TODO: to be implemented
// They should only be integers, like C
[pub] enum Fancy {
    Value,
    Another,
    MegaValue,
}

[pub] enum FancyValued {
    Value = 2,
    Another = 9,
    MegaValue = 8,
}

// In this case, we use a incremental sequence for those enum-values
// that don't have an assignment
[pub] enum FancyValued {
    Value = 0,
    Another,
    MegaValue,
}
*/

// these are immutable values!
const hello: string = "test";
const test: float = 3.14;

const (
    first: string = "hello world";
    second: int = 42;
    third: char = 'a';
    fourth: float = 55.789;
    fifth: string[] = {"one", "two", "three"};
    sixth: int[] = {1,2,3,4,5};
    seventh: float[] = {1.1,2.2,3.3};
    eight: char[] = {'a', 'b', 'c'};
)


fn main() -> int {
    let f = Test{name: "Davide", age: 35 };
    
    let b = Banana.new("Davide", 35);

    let t = fmt.random.lekker.Println("hello");
    return 0;
}

fn WithGenerics<T, Foo<E>>(i: int, is_fancy: bool) -> (int, error) {
    return (0, nil);
}

fn copyFile(src: string, dst: string) -> error {
    let stat = os.Stat(src);

    if (!stat.Mode().IsRegular()) {
        return Err(fmt.Errorf("%s is not a regular file", src));
    }

    let source = os.Open(src);
    defer source.Close();

    let destination_magic = os.Create(dst);
    defer destination_magic.Close();

    let text = "hello world";
    //let guess = match strconv.Atoi(text) {
    //    Ok(n) => n,
    //    Err(_) => continue,
    //}

    // ignore number of bytes copied
    let cp = io.Copy(destination_magic, source);

    return nil;
}